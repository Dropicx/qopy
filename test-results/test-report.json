{
  "timestamp": "2025-08-04T09:23:16.232Z",
  "summary": {
    "passed": 1,
    "failed": 7,
    "successRate": 12.5
  },
  "results": [
    {
      "name": "Unit Tests - FileService",
      "status": "FAILED",
      "output": "  console.warn\n    Skipping filesystem integration test: fs.writeFile is not a function\n\n      279 |       } catch (error) {\n      280 |         // Skip test if filesystem operations fail\n    > 281 |         console.warn('Skipping filesystem integration test:', error.message);\n          |                 ^\n      282 |       }\n      283 |     });\n      284 |   });\n\n      at Object.warn (tests/unit/services/FileService.test.js:281:17)\n\n",
      "error": "FAIL tests/unit/services/FileService.test.js\n  FileService\n    fileExists\n      ✓ should return true when file exists (3 ms)\n      ✓ should return false when file does not exist\n      ✓ should handle various file path formats (1 ms)\n      ✓ should handle empty or null paths gracefully (1 ms)\n    setDownloadHeaders\n      ✕ should set correct headers for a typical file\n      ✕ should use default mime type when not provided (1 ms)\n      ✕ should handle various mime types correctly (1 ms)\n      ✕ should handle special characters in filenames (1 ms)\n      ✕ should handle edge cases for file sizes (1 ms)\n    Error Handling\n      ✓ should handle filesystem errors gracefully (1 ms)\n      ✓ should not throw when response object is missing methods (1 ms)\n    Performance Tests\n      ✓ should check file exists within reasonable time (1 ms)\n      ✓ should handle multiple concurrent file existence checks\n    Integration with Real Filesystem\n      ✓ should work with actual file system operations (13 ms)\n\n  ● FileService › setDownloadHeaders › should set correct headers for a typical file\n\n    TypeError: res.setHeader is not a function\n\n      26 |      */\n      27 |     setDownloadHeaders(res, clip) {\n    > 28 |         res.setHeader('Content-Type', clip.mime_type || 'application/octet-stream');\n         |             ^\n      29 |         res.setHeader('Content-Length', clip.filesize);\n      30 |         res.setHeader('Content-Disposition', `attachment; filename=\"${clip.original_filename}\"`);\n      31 |         res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n\n      at FileService.setHeader [as setDownloadHeaders] (services/FileService.js:28:13)\n      at Object.setDownloadHeaders (tests/unit/services/FileService.test.js:105:19)\n\n  ● FileService › setDownloadHeaders › should use default mime type when not provided\n\n    TypeError: res.setHeader is not a function\n\n      26 |      */\n      27 |     setDownloadHeaders(res, clip) {\n    > 28 |         res.setHeader('Content-Type', clip.mime_type || 'application/octet-stream');\n         |             ^\n      29 |         res.setHeader('Content-Length', clip.filesize);\n      30 |         res.setHeader('Content-Disposition', `attachment; filename=\"${clip.original_filename}\"`);\n      31 |         res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n\n      at FileService.setHeader [as setDownloadHeaders] (services/FileService.js:28:13)\n      at Object.setDownloadHeaders (tests/unit/services/FileService.test.js:119:19)\n\n  ● FileService › setDownloadHeaders › should handle various mime types correctly\n\n    TypeError: res.setHeader is not a function\n\n      26 |      */\n      27 |     setDownloadHeaders(res, clip) {\n    > 28 |         res.setHeader('Content-Type', clip.mime_type || 'application/octet-stream');\n         |             ^\n      29 |         res.setHeader('Content-Length', clip.filesize);\n      30 |         res.setHeader('Content-Disposition', `attachment; filename=\"${clip.original_filename}\"`);\n      31 |         res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n\n      at FileService.setHeader [as setDownloadHeaders] (services/FileService.js:28:13)\n      at setDownloadHeaders (tests/unit/services/FileService.test.js:145:21)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/unit/services/FileService.test.js:137:17)\n\n  ● FileService › setDownloadHeaders › should handle special characters in filenames\n\n    TypeError: res.setHeader is not a function\n\n      26 |      */\n      27 |     setDownloadHeaders(res, clip) {\n    > 28 |         res.setHeader('Content-Type', clip.mime_type || 'application/octet-stream');\n         |             ^\n      29 |         res.setHeader('Content-Length', clip.filesize);\n      30 |         res.setHeader('Content-Disposition', `attachment; filename=\"${clip.original_filename}\"`);\n      31 |         res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n\n      at FileService.setHeader [as setDownloadHeaders] (services/FileService.js:28:13)\n      at setDownloadHeaders (tests/unit/services/FileService.test.js:169:21)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/unit/services/FileService.test.js:161:24)\n\n  ● FileService › setDownloadHeaders › should handle edge cases for file sizes\n\n    TypeError: res.setHeader is not a function\n\n      26 |      */\n      27 |     setDownloadHeaders(res, clip) {\n    > 28 |         res.setHeader('Content-Type', clip.mime_type || 'application/octet-stream');\n         |             ^\n      29 |         res.setHeader('Content-Length', clip.filesize);\n      30 |         res.setHeader('Content-Disposition', `attachment; filename=\"${clip.original_filename}\"`);\n      31 |         res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n\n      at FileService.setHeader [as setDownloadHeaders] (services/FileService.js:28:13)\n      at setDownloadHeaders (tests/unit/services/FileService.test.js:190:21)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/unit/services/FileService.test.js:182:17)\n\nTest Suites: 1 failed, 1 total\nTests:       5 failed, 9 passed, 14 total\nSnapshots:   0 total\nTime:        0.184 s, estimated 1 s\nRan all test suites matching /tests\\/unit\\/services\\/FileService.test.js/i.\n"
    },
    {
      "name": "Unit Tests - QuickShareService",
      "status": "FAILED",
      "output": "",
      "error": "FAIL tests/unit/services/QuickShareService.test.js\n  QuickShareService\n    applyQuickShareSettings\n      ✓ should apply Quick Share overrides to basic settings (3 ms)\n      ✓ should handle empty settings object\n      ✕ should handle null or undefined settings (12 ms)\n      ✓ should preserve non-Quick Share specific settings\n      ✓ should handle typical Quick Share scenarios (1 ms)\n      ✓ should handle edge cases and boundary values (1 ms)\n    Quick Share Configuration Logic\n      ✓ should apply appropriate settings for different content types\n      ✓ should handle security-related Quick Share settings\n      ✓ should handle accessibility and sharing options\n    Performance and Scalability\n      ✓ should handle large settings objects efficiently (1 ms)\n      ✓ should handle concurrent Quick Share setting applications\n    Error Handling and Edge Cases\n      ✓ should handle circular references gracefully (1 ms)\n      ✓ should handle deeply nested objects\n      ✓ should handle non-object input types\n    Backward Compatibility\n      ✓ should maintain compatibility with legacy settings format (1 ms)\n      ✓ should handle mixed legacy and modern settings\n\n  ● QuickShareService › applyQuickShareSettings › should handle null or undefined settings\n\n    expect(received).not.toThrow()\n\n    Error name:    \"TypeError\"\n    Error message: \"Cannot read properties of null (reading 'quickShare')\"\n\n          29 |      */\n          30 |     static applyQuickShareSettings(settings) {\n        > 31 |         if (!settings.quickShare) {\n             |                       ^\n          32 |             return settings;\n          33 |         }\n          34 |\n\n      at QuickShareService.quickShare [as applyQuickShareSettings] (services/QuickShareService.js:31:23)\n      at applyQuickShareSettings (tests/unit/services/QuickShareService.test.js:52:27)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (tests/unit/services/QuickShareService.test.js:53:14)\n      at Object.toThrow (tests/unit/services/QuickShareService.test.js:53:14)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 15 passed, 16 total\nSnapshots:   0 total\nTime:        0.172 s, estimated 1 s\nRan all test suites matching /tests\\/unit\\/services\\/QuickShareService.test.js/i.\n"
    },
    {
      "name": "Unit Tests - UploadValidator",
      "status": "FAILED",
      "output": "",
      "error": "FAIL tests/unit/services/UploadValidator.test.js\n  UploadValidator\n    parseUploadRequest\n      New Text Upload System\n        ✓ should parse new text upload system with accessCodeHash (3 ms)\n        ✓ should parse new text upload system with quickShareSecret\n        ✓ should detect new system when requiresAccessCode is defined as false (1 ms)\n        ✓ should handle new system with minimal data (1 ms)\n      Legacy File Upload System\n        ✓ should parse legacy file upload system\n        ✓ should handle legacy system without password (1 ms)\n        ✓ should convert legacy system to new system format (1 ms)\n      Edge Cases and Error Handling\n        ✓ should handle empty request body\n        ✕ should handle null request body (19 ms)\n        ✕ should handle undefined request body (1 ms)\n        ✓ should handle malformed request body\n        ✕ should handle request body with circular references (2 ms)\n      System Detection Logic\n        ✓ accessCodeHash should trigger new system (1 ms)\n        ✓ requiresAccessCode defined should trigger new system\n        ✕ isTextUpload should trigger new system (2 ms)\n        ✓ quickShareSecret should trigger new system (2 ms)\n        ✓ absence of new system indicators should use legacy system\n      Mixed System Scenarios\n        ✓ should prioritize new system when both systems have indicators (1 ms)\n        ✓ should handle partial new system data gracefully (1 ms)\n      Performance Tests\n        ✓ should parse request within reasonable time\n        ✓ should handle large request bodies efficiently\n      Data Integrity\n        ✓ should preserve all fields from new system\n        ✓ should preserve all fields from legacy system (1 ms)\n\n  ● UploadValidator › parseUploadRequest › Edge Cases and Error Handling › should handle null request body\n\n    expect(received).not.toThrow()\n\n    Error name:    \"TypeError\"\n    Error message: \"Cannot read properties of null (reading 'accessCodeHash')\"\n\n          16 |         try {\n          17 |             // Try new text upload system first - check for isTextUpload or quickShareSecret too\n        > 18 |             if (requestBody.accessCodeHash || requestBody.requiresAccessCode !== undefined || \n             |                             ^\n          19 |                 requestBody.isTextUpload || requestBody.quickShareSecret) {\n          20 |                 console.log('🔍 Using NEW text upload system');\n          21 |                 ({ quickShareSecret, accessCodeHash: clientAccessCodeHash, requiresAccessCode,\n\n      at UploadValidator.accessCodeHash [as parseUploadRequest] (services/UploadValidator.js:18:29)\n      at parseUploadRequest (tests/unit/services/UploadValidator.test.js:182:27)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (tests/unit/services/UploadValidator.test.js:183:16)\n      at Object.toThrow (tests/unit/services/UploadValidator.test.js:183:16)\n\n  ● UploadValidator › parseUploadRequest › Edge Cases and Error Handling › should handle undefined request body\n\n    expect(received).not.toThrow()\n\n    Error name:    \"TypeError\"\n    Error message: \"Cannot read properties of undefined (reading 'accessCodeHash')\"\n\n          16 |         try {\n          17 |             // Try new text upload system first - check for isTextUpload or quickShareSecret too\n        > 18 |             if (requestBody.accessCodeHash || requestBody.requiresAccessCode !== undefined || \n             |                             ^\n          19 |                 requestBody.isTextUpload || requestBody.quickShareSecret) {\n          20 |                 console.log('🔍 Using NEW text upload system');\n          21 |                 ({ quickShareSecret, accessCodeHash: clientAccessCodeHash, requiresAccessCode,\n\n      at UploadValidator.accessCodeHash [as parseUploadRequest] (services/UploadValidator.js:18:29)\n      at parseUploadRequest (tests/unit/services/UploadValidator.test.js:188:27)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (tests/unit/services/UploadValidator.test.js:189:16)\n      at Object.toThrow (tests/unit/services/UploadValidator.test.js:189:16)\n\n  ● UploadValidator › parseUploadRequest › Edge Cases and Error Handling › should handle request body with circular references\n\n    expect(received).not.toThrow()\n\n    Error name:    \"TypeError\"\n    Error message: \"Converting circular structure to JSON\n        --> starting at object with constructor 'Object'\n        --- property 'self' closes the circle\"\n\n           9 |      */\n          10 |     static parseUploadRequest(requestBody) {\n        > 11 |         console.log('🔍 Request body:', JSON.stringify(requestBody, null, 2));\n             |                                              ^\n          12 |         \n          13 |         let quickShareSecret, clientAccessCodeHash, requiresAccessCode, textContent, isTextUpload, contentType;\n          14 |         let password, urlSecret; // File upload system\n\n      at UploadValidator.stringify [as parseUploadRequest] (services/UploadValidator.js:11:46)\n      at parseUploadRequest (tests/unit/services/UploadValidator.test.js:213:27)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (tests/unit/services/UploadValidator.test.js:214:16)\n      at Object.toThrow (tests/unit/services/UploadValidator.test.js:214:16)\n\n  ● UploadValidator › parseUploadRequest › System Detection Logic › isTextUpload should trigger new system\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: \"🔍 Using NEW text upload system\"\n    Received\n           1: \"🔍 Request body:\", \"{\n      \\\"isTextUpload\\\": false\n    }\"\n           2: \"🔍 Using OLD file upload system\"\n           3: \"🔑 Upload complete request body:\", {\"contentType\": \"file\", \"fullRequestBody\": {\"isTextUpload\": false}, \"hasAccessCodeHash\": false, \"isTextUpload\": false, \"quickShareSecret\": undefined, \"requiresAccessCode\": false}\n\n    Number of calls: 3\n\n      236 |         const result = UploadValidator.parseUploadRequest(requestBody);\n      237 |         \n    > 238 |         expect(mockConsole.log).toHaveBeenCalledWith('🔍 Using NEW text upload system');\n          |                                 ^\n      239 |       });\n      240 |\n      241 |       test('quickShareSecret should trigger new system', () => {\n\n      at Object.toHaveBeenCalledWith (tests/unit/services/UploadValidator.test.js:238:33)\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 19 passed, 23 total\nSnapshots:   0 total\nTime:        0.228 s, estimated 1 s\nRan all test suites matching /tests\\/unit\\/services\\/UploadValidator.test.js/i.\n"
    },
    {
      "name": "Unit Tests - EncryptionService",
      "status": "FAILED",
      "output": "",
      "error": "FAIL tests/unit/services/EncryptionService.test.js\n  EncryptionService\n    processAccessCode\n      Quick Share Scenarios\n        ✓ should handle Quick Share with access code (4 ms)\n        ✓ should handle Quick Share without access code (1 ms)\n        ✓ should handle Quick Share with empty secret\n      Regular Upload Scenarios\n        ✓ should handle regular upload with password\n        ✓ should handle regular upload without password (1 ms)\n      Access Code Hash Analysis\n        ✓ should log access code hash length when present\n        ✓ should handle various hash lengths (1 ms)\n      requiresAccessCode Type Analysis\n        ✓ should log correct type for boolean true (1 ms)\n        ✓ should log correct type for boolean false\n        ✓ should handle non-boolean types for requiresAccessCode (2 ms)\n      Error Handling\n        ✕ should handle missing session properties (14 ms)\n        ✕ should handle missing request data properties (2 ms)\n        ✕ should catch and log errors during analysis (2 ms)\n        ✕ should handle circular references in session or requestData (1 ms)\n      Performance Tests\n        ✕ should process access code within reasonable time\n        ✕ should handle concurrent access code processing\n\n  ● EncryptionService › processAccessCode › Error Handling › should handle missing session properties\n\n    expect(received).not.toThrow()\n\n    Error name:    \"TypeError\"\n    Error message: \"Cannot read properties of null (reading 'quick_share')\"\n\n          32 |         \n          33 |         try {\n        > 34 |             if (session.quick_share && quickShareSecret) {\n             |                         ^\n          35 |                 // Quick Share: Store secret in password_hash field (legacy compatibility)\n          36 |                 console.log('🔑 Setting Quick Share secret for upload:', session.upload_id, 'secret:', quickShareSecret);\n          37 |                 passwordHash = quickShareSecret;\n\n      at EncryptionService.quick_share [as processAccessCode] (services/EncryptionService.js:34:25)\n      at processAccessCode (tests/unit/services/EncryptionService.test.js:316:46)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at toThrow (tests/unit/services/EncryptionService.test.js:318:18)\n                at Array.forEach (<anonymous>)\n      at Object.forEach (tests/unit/services/EncryptionService.test.js:309:28)\n      at toThrow (tests/unit/services/EncryptionService.test.js:318:18)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/unit/services/EncryptionService.test.js:309:28)\n\n  ● EncryptionService › processAccessCode › Error Handling › should handle missing request data properties\n\n    expect(received).not.toThrow()\n\n    Error name:    \"TypeError\"\n    Error message: \"Cannot destructure property 'quickShareSecret' of 'requestData' as it is null.\"\n\n          10 |      */\n          11 |     static processAccessCode(session, requestData) {\n        > 12 |         const { quickShareSecret, clientAccessCodeHash, requiresAccessCode } = requestData;\n             |                 ^\n          13 |         \n          14 |         let passwordHash = null;\n          15 |         let accessCodeHash = null;\n\n      at EncryptionService.quickShareSecret [as processAccessCode] (services/EncryptionService.js:12:17)\n      at processAccessCode (tests/unit/services/EncryptionService.test.js:339:46)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at toThrow (tests/unit/services/EncryptionService.test.js:341:18)\n                at Array.forEach (<anonymous>)\n      at Object.forEach (tests/unit/services/EncryptionService.test.js:337:31)\n      at toThrow (tests/unit/services/EncryptionService.test.js:341:18)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/unit/services/EncryptionService.test.js:337:31)\n\n  ● EncryptionService › processAccessCode › Error Handling › should catch and log errors during analysis\n\n    expect(received).not.toThrow()\n\n    Error name:    \"Error\"\n    Error message: \"Logging error\"\n\n          354 |         const originalLog = mockConsole.log;\n          355 |         mockConsole.log.mockImplementation(() => {\n        > 356 |           throw new Error('Logging error');\n              |                 ^\n          357 |         });\n          358 |\n          359 |         const requestData = {\n\n      at Object.<anonymous> (tests/unit/services/EncryptionService.test.js:356:17)\n      at EncryptionService.log [as processAccessCode] (services/EncryptionService.js:36:25)\n      at processAccessCode (tests/unit/services/EncryptionService.test.js:367:44)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (tests/unit/services/EncryptionService.test.js:369:16)\n      at Object.toThrow (tests/unit/services/EncryptionService.test.js:369:16)\n\n  ● EncryptionService › processAccessCode › Error Handling › should handle circular references in session or requestData\n\n    expect(received).not.toThrow()\n\n    Error name:    \"Error\"\n    Error message: \"Logging error\"\n\n          354 |         const originalLog = mockConsole.log;\n          355 |         mockConsole.log.mockImplementation(() => {\n        > 356 |           throw new Error('Logging error');\n              |                 ^\n          357 |         });\n          358 |\n          359 |         const requestData = {\n\n      at Object.<anonymous> (tests/unit/services/EncryptionService.test.js:356:17)\n      at EncryptionService.log [as processAccessCode] (services/EncryptionService.js:52:25)\n      at processAccessCode (tests/unit/services/EncryptionService.test.js:395:44)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (tests/unit/services/EncryptionService.test.js:397:16)\n      at Object.toThrow (tests/unit/services/EncryptionService.test.js:397:16)\n\n  ● EncryptionService › processAccessCode › Performance Tests › should process access code within reasonable time\n\n    Logging error\n\n      354 |         const originalLog = mockConsole.log;\n      355 |         mockConsole.log.mockImplementation(() => {\n    > 356 |           throw new Error('Logging error');\n          |                 ^\n      357 |         });\n      358 |\n      359 |         const requestData = {\n\n      at Object.<anonymous> (tests/unit/services/EncryptionService.test.js:356:17)\n      at EncryptionService.log [as processAccessCode] (services/EncryptionService.js:42:25)\n      at Object.processAccessCode (tests/unit/services/EncryptionService.test.js:415:42)\n\n  ● EncryptionService › processAccessCode › Performance Tests › should handle concurrent access code processing\n\n    Logging error\n\n      354 |         const originalLog = mockConsole.log;\n      355 |         mockConsole.log.mockImplementation(() => {\n    > 356 |           throw new Error('Logging error');\n          |                 ^\n      357 |         });\n      358 |\n      359 |         const requestData = {\n\n      at Object.<anonymous> (tests/unit/services/EncryptionService.test.js:356:17)\n      at EncryptionService.log [as processAccessCode] (services/EncryptionService.js:36:25)\n      at processAccessCode (tests/unit/services/EncryptionService.test.js:437:45)\n          at Array.map (<anonymous>)\n      at Object.map (tests/unit/services/EncryptionService.test.js:436:35)\n\nTest Suites: 1 failed, 1 total\nTests:       6 failed, 10 passed, 16 total\nSnapshots:   0 total\nTime:        0.192 s, estimated 1 s\nRan all test suites matching /tests\\/unit\\/services\\/EncryptionService.test.js/i.\n"
    },
    {
      "name": "Unit Tests - StorageService",
      "status": "PASSED",
      "output": ""
    },
    {
      "name": "Unit Tests - FileAssemblyService",
      "status": "FAILED",
      "output": "",
      "error": "FAIL tests/unit/services/FileAssemblyService.test.js\n  FileAssemblyService\n    assembleFile\n      ✕ should assemble file successfully (1 ms)\n      ✕ should handle assembly errors gracefully (8 ms)\n      ✕ should handle various upload ID formats (1 ms)\n      ✕ should handle various session objects\n      ✕ should handle null or undefined parameters\n    getFileSize\n      ✓ should get file size successfully (1 ms)\n      ✓ should handle file stat errors (1 ms)\n      ✓ should handle various file sizes (2 ms)\n      ✓ should handle different file types (1 ms)\n      ✓ should handle invalid file paths (2 ms)\n    Performance Tests\n      ✕ should assemble files within reasonable time\n      ✓ should get file size within reasonable time\n      ✕ should handle concurrent assembly operations (1 ms)\n      ✓ should handle concurrent file size operations\n    Error Recovery\n      ✕ should handle temporary assembly failures (1 ms)\n      ✓ should handle filesystem permission errors\n    Edge Cases\n      ✕ should handle extremely long file paths\n      ✕ should handle special characters in upload IDs (1 ms)\n      ✕ should handle circular references in session objects\n\n  ● FileAssemblyService › assembleFile › should assemble file successfully\n\n    assembleFile function not provided\n\n      17 |         \n      18 |         if (!assembleFileFn) {\n    > 19 |             throw new Error('assembleFile function not provided');\n         |                   ^\n      20 |         }\n      21 |         \n      22 |         const filePath = await assembleFileFn(uploadId, session);\n\n      at FileAssemblyService.assembleFile (services/FileAssemblyService.js:19:19)\n      at Object.assembleFile (tests/unit/services/FileAssemblyService.test.js:67:48)\n\n  ● FileAssemblyService › assembleFile › should handle assembly errors gracefully\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected substring: \"Failed to assemble file chunks\"\n    Received message:   \"assembleFile function not provided\"\n\n          17 |         \n          18 |         if (!assembleFileFn) {\n        > 19 |             throw new Error('assembleFile function not provided');\n             |                   ^\n          20 |         }\n          21 |         \n          22 |         const filePath = await assembleFileFn(uploadId, session);\n\n      at FileAssemblyService.assembleFile (services/FileAssemblyService.js:19:19)\n      at Object.assembleFile (tests/unit/services/FileAssemblyService.test.js:83:29)\n      at Object.toThrow (node_modules/expect/build/index.js:218:22)\n      at Object.toThrow (tests/unit/services/FileAssemblyService.test.js:84:17)\n\n  ● FileAssemblyService › assembleFile › should handle various upload ID formats\n\n    assembleFile function not provided\n\n      17 |         \n      18 |         if (!assembleFileFn) {\n    > 19 |             throw new Error('assembleFile function not provided');\n         |                   ^\n      20 |         }\n      21 |         \n      22 |         const filePath = await assembleFileFn(uploadId, session);\n\n      at FileAssemblyService.assembleFile (services/FileAssemblyService.js:19:19)\n      at Object.assembleFile (tests/unit/services/FileAssemblyService.test.js:106:50)\n\n  ● FileAssemblyService › assembleFile › should handle various session objects\n\n    assembleFile function not provided\n\n      17 |         \n      18 |         if (!assembleFileFn) {\n    > 19 |             throw new Error('assembleFile function not provided');\n         |                   ^\n      20 |         }\n      21 |         \n      22 |         const filePath = await assembleFileFn(uploadId, session);\n\n      at FileAssemblyService.assembleFile (services/FileAssemblyService.js:19:19)\n      at Object.assembleFile (tests/unit/services/FileAssemblyService.test.js:129:50)\n\n  ● FileAssemblyService › assembleFile › should handle null or undefined parameters\n\n    assembleFile function not provided\n\n      17 |         \n      18 |         if (!assembleFileFn) {\n    > 19 |             throw new Error('assembleFile function not provided');\n         |                   ^\n      20 |         }\n      21 |         \n      22 |         const filePath = await assembleFileFn(uploadId, session);\n\n      at FileAssemblyService.assembleFile (services/FileAssemblyService.js:19:19)\n      at Object.assembleFile (tests/unit/services/FileAssemblyService.test.js:150:50)\n\n  ● FileAssemblyService › Performance Tests › should assemble files within reasonable time\n\n    assembleFile function not provided\n\n      17 |         \n      18 |         if (!assembleFileFn) {\n    > 19 |             throw new Error('assembleFile function not provided');\n         |                   ^\n      20 |         }\n      21 |         \n      22 |         const filePath = await assembleFileFn(uploadId, session);\n\n      at FileAssemblyService.assembleFile (services/FileAssemblyService.js:19:19)\n      at Object.assembleFile (tests/unit/services/FileAssemblyService.test.js:261:48)\n\n  ● FileAssemblyService › Performance Tests › should handle concurrent assembly operations\n\n    assembleFile function not provided\n\n      17 |         \n      18 |         if (!assembleFileFn) {\n    > 19 |             throw new Error('assembleFile function not provided');\n         |                   ^\n      20 |         }\n      21 |         \n      22 |         const filePath = await assembleFileFn(uploadId, session);\n\n      at FileAssemblyService.assembleFile (services/FileAssemblyService.js:19:19)\n      at assembleFile (tests/unit/services/FileAssemblyService.test.js:296:29)\n          at Array.map (<anonymous>)\n      at Object.map (tests/unit/services/FileAssemblyService.test.js:295:45)\n\n  ● FileAssemblyService › Error Recovery › should handle temporary assembly failures\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected substring: \"Temporary failure\"\n    Received message:   \"assembleFile function not provided\"\n\n          17 |         \n          18 |         if (!assembleFileFn) {\n        > 19 |             throw new Error('assembleFile function not provided');\n             |                   ^\n          20 |         }\n          21 |         \n          22 |         const filePath = await assembleFileFn(uploadId, session);\n\n      at FileAssemblyService.assembleFile (services/FileAssemblyService.js:19:19)\n      at Object.assembleFile (tests/unit/services/FileAssemblyService.test.js:346:29)\n      at Object.toThrow (node_modules/expect/build/index.js:218:22)\n      at Object.toThrow (tests/unit/services/FileAssemblyService.test.js:347:17)\n\n  ● FileAssemblyService › Edge Cases › should handle extremely long file paths\n\n    assembleFile function not provided\n\n      17 |         \n      18 |         if (!assembleFileFn) {\n    > 19 |             throw new Error('assembleFile function not provided');\n         |                   ^\n      20 |         }\n      21 |         \n      22 |         const filePath = await assembleFileFn(uploadId, session);\n\n      at FileAssemblyService.assembleFile (services/FileAssemblyService.js:19:19)\n      at Object.assembleFile (tests/unit/services/FileAssemblyService.test.js:375:48)\n\n  ● FileAssemblyService › Edge Cases › should handle special characters in upload IDs\n\n    assembleFile function not provided\n\n      17 |         \n      18 |         if (!assembleFileFn) {\n    > 19 |             throw new Error('assembleFile function not provided');\n         |                   ^\n      20 |         }\n      21 |         \n      22 |         const filePath = await assembleFileFn(uploadId, session);\n\n      at FileAssemblyService.assembleFile (services/FileAssemblyService.js:19:19)\n      at Object.assembleFile (tests/unit/services/FileAssemblyService.test.js:396:50)\n\n  ● FileAssemblyService › Edge Cases › should handle circular references in session objects\n\n    assembleFile function not provided\n\n      17 |         \n      18 |         if (!assembleFileFn) {\n    > 19 |             throw new Error('assembleFile function not provided');\n         |                   ^\n      20 |         }\n      21 |         \n      22 |         const filePath = await assembleFileFn(uploadId, session);\n\n      at FileAssemblyService.assembleFile (services/FileAssemblyService.js:19:19)\n      at Object.assembleFile (tests/unit/services/FileAssemblyService.test.js:410:48)\n\nTest Suites: 1 failed, 1 total\nTests:       11 failed, 8 passed, 19 total\nSnapshots:   0 total\nTime:        0.194 s, estimated 1 s\nRan all test suites matching /tests\\/unit\\/services\\/FileAssemblyService.test.js/i.\n"
    },
    {
      "name": "Integration Tests",
      "status": "FAILED",
      "output": "",
      "error": "FAIL tests/integration/api/services-integration.test.js\n  ● Services Integration Tests › Upload Completion Workflow Integration › should complete upload workflow with all services\n\n    error: password authentication failed for user \"test\"\n\n      74 |     `;\n      75 |\n    > 76 |     await this.pool.query(createTablesSQL);\n         |     ^\n      77 |   }\n      78 |\n      79 |   async clearAllTables() {\n\n      at node_modules/pg-pool/index.js:45:11\n      at TestDatabase.createTables (tests/helpers/database.js:76:5)\n      at TestDatabase.setup (tests/helpers/database.js:32:5)\n      at Object.<anonymous> (tests/integration/api/services-integration.test.js:43:5)\n\n  ● Services Integration Tests › Upload Completion Workflow Integration › should handle text upload workflow\n\n    error: password authentication failed for user \"test\"\n\n      74 |     `;\n      75 |\n    > 76 |     await this.pool.query(createTablesSQL);\n         |     ^\n      77 |   }\n      78 |\n      79 |   async clearAllTables() {\n\n      at node_modules/pg-pool/index.js:45:11\n      at TestDatabase.createTables (tests/helpers/database.js:76:5)\n      at TestDatabase.setup (tests/helpers/database.js:32:5)\n      at Object.<anonymous> (tests/integration/api/services-integration.test.js:43:5)\n\n  ● Services Integration Tests › Upload Completion Workflow Integration › should handle Quick Share workflow\n\n    error: password authentication failed for user \"test\"\n\n      74 |     `;\n      75 |\n    > 76 |     await this.pool.query(createTablesSQL);\n         |     ^\n      77 |   }\n      78 |\n      79 |   async clearAllTables() {\n\n      at node_modules/pg-pool/index.js:45:11\n      at TestDatabase.createTables (tests/helpers/database.js:76:5)\n      at TestDatabase.setup (tests/helpers/database.js:32:5)\n      at Object.<anonymous> (tests/integration/api/services-integration.test.js:43:5)\n\n  ● Services Integration Tests › File Access Workflow Integration › should complete file access workflow\n\n    error: password authentication failed for user \"test\"\n\n      74 |     `;\n      75 |\n    > 76 |     await this.pool.query(createTablesSQL);\n         |     ^\n      77 |   }\n      78 |\n      79 |   async clearAllTables() {\n\n      at node_modules/pg-pool/index.js:45:11\n      at TestDatabase.createTables (tests/helpers/database.js:76:5)\n      at TestDatabase.setup (tests/helpers/database.js:32:5)\n      at Object.<anonymous> (tests/integration/api/services-integration.test.js:43:5)\n\n  ● Services Integration Tests › File Access Workflow Integration › should handle file not found scenario\n\n    error: password authentication failed for user \"test\"\n\n      74 |     `;\n      75 |\n    > 76 |     await this.pool.query(createTablesSQL);\n         |     ^\n      77 |   }\n      78 |\n      79 |   async clearAllTables() {\n\n      at node_modules/pg-pool/index.js:45:11\n      at TestDatabase.createTables (tests/helpers/database.js:76:5)\n      at TestDatabase.setup (tests/helpers/database.js:32:5)\n      at Object.<anonymous> (tests/integration/api/services-integration.test.js:43:5)\n\n  ● Services Integration Tests › Error Propagation Integration › should propagate errors through service chain\n\n    error: password authentication failed for user \"test\"\n\n      74 |     `;\n      75 |\n    > 76 |     await this.pool.query(createTablesSQL);\n         |     ^\n      77 |   }\n      78 |\n      79 |   async clearAllTables() {\n\n      at node_modules/pg-pool/index.js:45:11\n      at TestDatabase.createTables (tests/helpers/database.js:76:5)\n      at TestDatabase.setup (tests/helpers/database.js:32:5)\n      at Object.<anonymous> (tests/integration/api/services-integration.test.js:43:5)\n\n  ● Services Integration Tests › Error Propagation Integration › should handle service dependency failures\n\n    error: password authentication failed for user \"test\"\n\n      74 |     `;\n      75 |\n    > 76 |     await this.pool.query(createTablesSQL);\n         |     ^\n      77 |   }\n      78 |\n      79 |   async clearAllTables() {\n\n      at node_modules/pg-pool/index.js:45:11\n      at TestDatabase.createTables (tests/helpers/database.js:76:5)\n      at TestDatabase.setup (tests/helpers/database.js:32:5)\n      at Object.<anonymous> (tests/integration/api/services-integration.test.js:43:5)\n\n  ● Services Integration Tests › Performance Integration Tests › should complete full workflow within time limits\n\n    error: password authentication failed for user \"test\"\n\n      74 |     `;\n      75 |\n    > 76 |     await this.pool.query(createTablesSQL);\n         |     ^\n      77 |   }\n      78 |\n      79 |   async clearAllTables() {\n\n      at node_modules/pg-pool/index.js:45:11\n      at TestDatabase.createTables (tests/helpers/database.js:76:5)\n      at TestDatabase.setup (tests/helpers/database.js:32:5)\n      at Object.<anonymous> (tests/integration/api/services-integration.test.js:43:5)\n\n  ● Services Integration Tests › Performance Integration Tests › should handle concurrent service requests\n\n    error: password authentication failed for user \"test\"\n\n      74 |     `;\n      75 |\n    > 76 |     await this.pool.query(createTablesSQL);\n         |     ^\n      77 |   }\n      78 |\n      79 |   async clearAllTables() {\n\n      at node_modules/pg-pool/index.js:45:11\n      at TestDatabase.createTables (tests/helpers/database.js:76:5)\n      at TestDatabase.setup (tests/helpers/database.js:32:5)\n      at Object.<anonymous> (tests/integration/api/services-integration.test.js:43:5)\n\n  ● Services Integration Tests › Database Integration › should integrate with test database\n\n    error: password authentication failed for user \"test\"\n\n      74 |     `;\n      75 |\n    > 76 |     await this.pool.query(createTablesSQL);\n         |     ^\n      77 |   }\n      78 |\n      79 |   async clearAllTables() {\n\n      at node_modules/pg-pool/index.js:45:11\n      at TestDatabase.createTables (tests/helpers/database.js:76:5)\n      at TestDatabase.setup (tests/helpers/database.js:32:5)\n      at Object.<anonymous> (tests/integration/api/services-integration.test.js:43:5)\n\n  ● Services Integration Tests › Database Integration › should clean up test data between tests\n\n    error: password authentication failed for user \"test\"\n\n      74 |     `;\n      75 |\n    > 76 |     await this.pool.query(createTablesSQL);\n         |     ^\n      77 |   }\n      78 |\n      79 |   async clearAllTables() {\n\n      at node_modules/pg-pool/index.js:45:11\n      at TestDatabase.createTables (tests/helpers/database.js:76:5)\n      at TestDatabase.setup (tests/helpers/database.js:32:5)\n      at Object.<anonymous> (tests/integration/api/services-integration.test.js:43:5)\n\n\n  ● Test suite failed to run\n\n    error: password authentication failed for user \"test\"\n\n      78 |\n      79 |   async clearAllTables() {\n    > 80 |     await this.pool.query('DELETE FROM clips');\n         |     ^\n      81 |     await this.pool.query('DELETE FROM file_uploads');\n      82 |   }\n      83 |\n\n      at node_modules/pg-pool/index.js:45:11\n      at TestDatabase.clearAllTables (tests/helpers/database.js:80:5)\n      at TestDatabase.teardown (tests/helpers/database.js:36:5)\n      at Object.<anonymous> (tests/integration/api/services-integration.test.js:55:5)\n\nTest Suites: 1 failed, 1 total\nTests:       11 failed, 11 total\nSnapshots:   0 total\nTime:        0.289 s, estimated 1 s\nRan all test suites matching /tests\\/integration/i.\n"
    },
    {
      "name": "Coverage Report",
      "status": "FAILED",
      "output": "  console.warn\n    Skipping filesystem integration test: fs.writeFile is not a function\n\n      279 |       } catch (error) {\n      280 |         // Skip test if filesystem operations fail\n    > 281 |         console.warn('Skipping filesystem integration test:', error.message);\n          |                 ^\n      282 |       }\n      283 |     });\n      284 |   });\n\n      at Object.warn (tests/unit/services/FileService.test.js:281:17)\n\n------------------------|---------|----------|---------|---------|-------------------\nFile                    | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n------------------------|---------|----------|---------|---------|-------------------\nAll files               |    38.5 |    31.03 |   29.62 |      40 |                   \n EncryptionService.js   |   91.17 |    94.44 |      50 |   91.17 | 92-102            \n FileAssemblyService.js |   66.66 |       50 |   66.66 |   66.66 | 22-25,45          \n FileService.js         |   23.52 |    28.57 |      25 |   23.52 | 29-88             \n QuickShareService.js   |   14.28 |     6.25 |      20 |   14.28 | 36-113            \n StorageService.js      |      15 |        0 |   16.66 |      15 | 40-187            \n UploadValidator.js     |   34.78 |    21.42 |   33.33 |   41.02 | 64-123            \n------------------------|---------|----------|---------|---------|-------------------\n",
      "error": "FAIL tests/integration/api/services-integration.test.js\n  ● Services Integration Tests › Upload Completion Workflow Integration › should complete upload workflow with all services\n\n    error: password authentication failed for user \"test\"\n\n      74 |     `;\n      75 |\n    > 76 |     await this.pool.query(createTablesSQL);\n         |     ^\n      77 |   }\n      78 |\n      79 |   async clearAllTables() {\n\n      at node_modules/pg-pool/index.js:45:11\n      at TestDatabase.createTables (tests/helpers/database.js:76:5)\n      at TestDatabase.setup (tests/helpers/database.js:32:5)\n      at Object.<anonymous> (tests/integration/api/services-integration.test.js:43:5)\n\n  ● Services Integration Tests › Upload Completion Workflow Integration › should handle text upload workflow\n\n    error: password authentication failed for user \"test\"\n\n      74 |     `;\n      75 |\n    > 76 |     await this.pool.query(createTablesSQL);\n         |     ^\n      77 |   }\n      78 |\n      79 |   async clearAllTables() {\n\n      at node_modules/pg-pool/index.js:45:11\n      at TestDatabase.createTables (tests/helpers/database.js:76:5)\n      at TestDatabase.setup (tests/helpers/database.js:32:5)\n      at Object.<anonymous> (tests/integration/api/services-integration.test.js:43:5)\n\n  ● Services Integration Tests › Upload Completion Workflow Integration › should handle Quick Share workflow\n\n    error: password authentication failed for user \"test\"\n\n      74 |     `;\n      75 |\n    > 76 |     await this.pool.query(createTablesSQL);\n         |     ^\n      77 |   }\n      78 |\n      79 |   async clearAllTables() {\n\n      at node_modules/pg-pool/index.js:45:11\n      at TestDatabase.createTables (tests/helpers/database.js:76:5)\n      at TestDatabase.setup (tests/helpers/database.js:32:5)\n      at Object.<anonymous> (tests/integration/api/services-integration.test.js:43:5)\n\n  ● Services Integration Tests › File Access Workflow Integration › should complete file access workflow\n\n    error: password authentication failed for user \"test\"\n\n      74 |     `;\n      75 |\n    > 76 |     await this.pool.query(createTablesSQL);\n         |     ^\n      77 |   }\n      78 |\n      79 |   async clearAllTables() {\n\n      at node_modules/pg-pool/index.js:45:11\n      at TestDatabase.createTables (tests/helpers/database.js:76:5)\n      at TestDatabase.setup (tests/helpers/database.js:32:5)\n      at Object.<anonymous> (tests/integration/api/services-integration.test.js:43:5)\n\n  ● Services Integration Tests › File Access Workflow Integration › should handle file not found scenario\n\n    error: password authentication failed for user \"test\"\n\n      74 |     `;\n      75 |\n    > 76 |     await this.pool.query(createTablesSQL);\n         |     ^\n      77 |   }\n      78 |\n      79 |   async clearAllTables() {\n\n      at node_modules/pg-pool/index.js:45:11\n      at TestDatabase.createTables (tests/helpers/database.js:76:5)\n      at TestDatabase.setup (tests/helpers/database.js:32:5)\n      at Object.<anonymous> (tests/integration/api/services-integration.test.js:43:5)\n\n  ● Services Integration Tests › Error Propagation Integration › should propagate errors through service chain\n\n    error: password authentication failed for user \"test\"\n\n      74 |     `;\n      75 |\n    > 76 |     await this.pool.query(createTablesSQL);\n         |     ^\n      77 |   }\n      78 |\n      79 |   async clearAllTables() {\n\n      at node_modules/pg-pool/index.js:45:11\n      at TestDatabase.createTables (tests/helpers/database.js:76:5)\n      at TestDatabase.setup (tests/helpers/database.js:32:5)\n      at Object.<anonymous> (tests/integration/api/services-integration.test.js:43:5)\n\n  ● Services Integration Tests › Error Propagation Integration › should handle service dependency failures\n\n    error: password authentication failed for user \"test\"\n\n      74 |     `;\n      75 |\n    > 76 |     await this.pool.query(createTablesSQL);\n         |     ^\n      77 |   }\n      78 |\n      79 |   async clearAllTables() {\n\n      at node_modules/pg-pool/index.js:45:11\n      at TestDatabase.createTables (tests/helpers/database.js:76:5)\n      at TestDatabase.setup (tests/helpers/database.js:32:5)\n      at Object.<anonymous> (tests/integration/api/services-integration.test.js:43:5)\n\n  ● Services Integration Tests › Performance Integration Tests › should complete full workflow within time limits\n\n    error: password authentication failed for user \"test\"\n\n      74 |     `;\n      75 |\n    > 76 |     await this.pool.query(createTablesSQL);\n         |     ^\n      77 |   }\n      78 |\n      79 |   async clearAllTables() {\n\n      at node_modules/pg-pool/index.js:45:11\n      at TestDatabase.createTables (tests/helpers/database.js:76:5)\n      at TestDatabase.setup (tests/helpers/database.js:32:5)\n      at Object.<anonymous> (tests/integration/api/services-integration.test.js:43:5)\n\n  ● Services Integration Tests › Performance Integration Tests › should handle concurrent service requests\n\n    error: password authentication failed for user \"test\"\n\n      74 |     `;\n      75 |\n    > 76 |     await this.pool.query(createTablesSQL);\n         |     ^\n      77 |   }\n      78 |\n      79 |   async clearAllTables() {\n\n      at node_modules/pg-pool/index.js:45:11\n      at TestDatabase.createTables (tests/helpers/database.js:76:5)\n      at TestDatabase.setup (tests/helpers/database.js:32:5)\n      at Object.<anonymous> (tests/integration/api/services-integration.test.js:43:5)\n\n  ● Services Integration Tests › Database Integration › should integrate with test database\n\n    error: password authentication failed for user \"test\"\n\n      74 |     `;\n      75 |\n    > 76 |     await this.pool.query(createTablesSQL);\n         |     ^\n      77 |   }\n      78 |\n      79 |   async clearAllTables() {\n\n      at node_modules/pg-pool/index.js:45:11\n      at TestDatabase.createTables (tests/helpers/database.js:76:5)\n      at TestDatabase.setup (tests/helpers/database.js:32:5)\n      at Object.<anonymous> (tests/integration/api/services-integration.test.js:43:5)\n\n  ● Services Integration Tests › Database Integration › should clean up test data between tests\n\n    error: password authentication failed for user \"test\"\n\n      74 |     `;\n      75 |\n    > 76 |     await this.pool.query(createTablesSQL);\n         |     ^\n      77 |   }\n      78 |\n      79 |   async clearAllTables() {\n\n      at node_modules/pg-pool/index.js:45:11\n      at TestDatabase.createTables (tests/helpers/database.js:76:5)\n      at TestDatabase.setup (tests/helpers/database.js:32:5)\n      at Object.<anonymous> (tests/integration/api/services-integration.test.js:43:5)\n\n\n  ● Test suite failed to run\n\n    error: password authentication failed for user \"test\"\n\n      78 |\n      79 |   async clearAllTables() {\n    > 80 |     await this.pool.query('DELETE FROM clips');\n         |     ^\n      81 |     await this.pool.query('DELETE FROM file_uploads');\n      82 |   }\n      83 |\n\n      at node_modules/pg-pool/index.js:45:11\n      at TestDatabase.clearAllTables (tests/helpers/database.js:80:5)\n      at TestDatabase.teardown (tests/helpers/database.js:36:5)\n      at Object.<anonymous> (tests/integration/api/services-integration.test.js:55:5)\n\nFAIL tests/unit/services/UploadValidator.test.js\n  UploadValidator\n    parseUploadRequest\n      New Text Upload System\n        ✓ should parse new text upload system with accessCodeHash (1 ms)\n        ✓ should parse new text upload system with quickShareSecret (1 ms)\n        ✓ should detect new system when requiresAccessCode is defined as false\n        ✓ should handle new system with minimal data\n      Legacy File Upload System\n        ✓ should parse legacy file upload system (1 ms)\n        ✓ should handle legacy system without password\n        ✓ should convert legacy system to new system format\n      Edge Cases and Error Handling\n        ✓ should handle empty request body (1 ms)\n        ✕ should handle null request body (6 ms)\n        ✕ should handle undefined request body (1 ms)\n        ✓ should handle malformed request body\n        ✕ should handle request body with circular references (1 ms)\n      System Detection Logic\n        ✓ accessCodeHash should trigger new system\n        ✓ requiresAccessCode defined should trigger new system (1 ms)\n        ✕ isTextUpload should trigger new system (1 ms)\n        ✓ quickShareSecret should trigger new system\n        ✓ absence of new system indicators should use legacy system\n      Mixed System Scenarios\n        ✓ should prioritize new system when both systems have indicators\n        ✓ should handle partial new system data gracefully\n      Performance Tests\n        ✓ should parse request within reasonable time\n        ✓ should handle large request bodies efficiently\n      Data Integrity\n        ✓ should preserve all fields from new system\n        ✓ should preserve all fields from legacy system (1 ms)\n\n  ● UploadValidator › parseUploadRequest › Edge Cases and Error Handling › should handle null request body\n\n    expect(received).not.toThrow()\n\n    Error name:    \"TypeError\"\n    Error message: \"Cannot read properties of null (reading 'accessCodeHash')\"\n\n          16 |         try {\n          17 |             // Try new text upload system first - check for isTextUpload or quickShareSecret too\n        > 18 |             if (requestBody.accessCodeHash || requestBody.requiresAccessCode !== undefined || \n             |                             ^\n          19 |                 requestBody.isTextUpload || requestBody.quickShareSecret) {\n          20 |                 console.log('🔍 Using NEW text upload system');\n          21 |                 ({ quickShareSecret, accessCodeHash: clientAccessCodeHash, requiresAccessCode,\n\n      at UploadValidator.accessCodeHash [as parseUploadRequest] (services/UploadValidator.js:18:29)\n      at parseUploadRequest (tests/unit/services/UploadValidator.test.js:182:27)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (tests/unit/services/UploadValidator.test.js:183:16)\n      at Object.toThrow (tests/unit/services/UploadValidator.test.js:183:16)\n\n  ● UploadValidator › parseUploadRequest › Edge Cases and Error Handling › should handle undefined request body\n\n    expect(received).not.toThrow()\n\n    Error name:    \"TypeError\"\n    Error message: \"Cannot read properties of undefined (reading 'accessCodeHash')\"\n\n          16 |         try {\n          17 |             // Try new text upload system first - check for isTextUpload or quickShareSecret too\n        > 18 |             if (requestBody.accessCodeHash || requestBody.requiresAccessCode !== undefined || \n             |                             ^\n          19 |                 requestBody.isTextUpload || requestBody.quickShareSecret) {\n          20 |                 console.log('🔍 Using NEW text upload system');\n          21 |                 ({ quickShareSecret, accessCodeHash: clientAccessCodeHash, requiresAccessCode,\n\n      at UploadValidator.accessCodeHash [as parseUploadRequest] (services/UploadValidator.js:18:29)\n      at parseUploadRequest (tests/unit/services/UploadValidator.test.js:188:27)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (tests/unit/services/UploadValidator.test.js:189:16)\n      at Object.toThrow (tests/unit/services/UploadValidator.test.js:189:16)\n\n  ● UploadValidator › parseUploadRequest › Edge Cases and Error Handling › should handle request body with circular references\n\n    expect(received).not.toThrow()\n\n    Error name:    \"TypeError\"\n    Error message: \"Converting circular structure to JSON\n        --> starting at object with constructor 'Object'\n        --- property 'self' closes the circle\"\n\n           9 |      */\n          10 |     static parseUploadRequest(requestBody) {\n        > 11 |         console.log('🔍 Request body:', JSON.stringify(requestBody, null, 2));\n             |                                              ^\n          12 |         \n          13 |         let quickShareSecret, clientAccessCodeHash, requiresAccessCode, textContent, isTextUpload, contentType;\n          14 |         let password, urlSecret; // File upload system\n\n      at UploadValidator.stringify [as parseUploadRequest] (services/UploadValidator.js:11:46)\n      at parseUploadRequest (tests/unit/services/UploadValidator.test.js:213:27)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (tests/unit/services/UploadValidator.test.js:214:16)\n      at Object.toThrow (tests/unit/services/UploadValidator.test.js:214:16)\n\n  ● UploadValidator › parseUploadRequest › System Detection Logic › isTextUpload should trigger new system\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: \"🔍 Using NEW text upload system\"\n    Received\n           1: \"🔍 Request body:\", \"{\n      \\\"isTextUpload\\\": false\n    }\"\n           2: \"🔍 Using OLD file upload system\"\n           3: \"🔑 Upload complete request body:\", {\"contentType\": \"file\", \"fullRequestBody\": {\"isTextUpload\": false}, \"hasAccessCodeHash\": false, \"isTextUpload\": false, \"quickShareSecret\": undefined, \"requiresAccessCode\": false}\n\n    Number of calls: 3\n\n      236 |         const result = UploadValidator.parseUploadRequest(requestBody);\n      237 |         \n    > 238 |         expect(mockConsole.log).toHaveBeenCalledWith('🔍 Using NEW text upload system');\n          |                                 ^\n      239 |       });\n      240 |\n      241 |       test('quickShareSecret should trigger new system', () => {\n\n      at Object.toHaveBeenCalledWith (tests/unit/services/UploadValidator.test.js:238:33)\n\nFAIL tests/unit/services/EncryptionService.test.js\n  EncryptionService\n    processAccessCode\n      Quick Share Scenarios\n        ✓ should handle Quick Share with access code (1 ms)\n        ✓ should handle Quick Share without access code (1 ms)\n        ✓ should handle Quick Share with empty secret\n      Regular Upload Scenarios\n        ✓ should handle regular upload with password\n        ✓ should handle regular upload without password (1 ms)\n      Access Code Hash Analysis\n        ✓ should log access code hash length when present\n        ✓ should handle various hash lengths (2 ms)\n      requiresAccessCode Type Analysis\n        ✓ should log correct type for boolean true\n        ✓ should log correct type for boolean false\n        ✓ should handle non-boolean types for requiresAccessCode (2 ms)\n      Error Handling\n        ✕ should handle missing session properties (9 ms)\n        ✕ should handle missing request data properties (1 ms)\n        ✕ should catch and log errors during analysis (1 ms)\n        ✕ should handle circular references in session or requestData (1 ms)\n      Performance Tests\n        ✕ should process access code within reasonable time\n        ✕ should handle concurrent access code processing\n\n  ● EncryptionService › processAccessCode › Error Handling › should handle missing session properties\n\n    expect(received).not.toThrow()\n\n    Error name:    \"TypeError\"\n    Error message: \"Cannot read properties of null (reading 'quick_share')\"\n\n          32 |         \n          33 |         try {\n        > 34 |             if (session.quick_share && quickShareSecret) {\n             |                         ^\n          35 |                 // Quick Share: Store secret in password_hash field (legacy compatibility)\n          36 |                 console.log('🔑 Setting Quick Share secret for upload:', session.upload_id, 'secret:', quickShareSecret);\n          37 |                 passwordHash = quickShareSecret;\n\n      at EncryptionService.quick_share [as processAccessCode] (services/EncryptionService.js:34:25)\n      at processAccessCode (tests/unit/services/EncryptionService.test.js:316:46)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at toThrow (tests/unit/services/EncryptionService.test.js:318:18)\n                at Array.forEach (<anonymous>)\n      at Object.forEach (tests/unit/services/EncryptionService.test.js:309:28)\n      at toThrow (tests/unit/services/EncryptionService.test.js:318:18)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/unit/services/EncryptionService.test.js:309:28)\n\n  ● EncryptionService › processAccessCode › Error Handling › should handle missing request data properties\n\n    expect(received).not.toThrow()\n\n    Error name:    \"TypeError\"\n    Error message: \"Cannot destructure property 'quickShareSecret' of '((cov_2hta5v77g9(...).s[0]++) , requestData)' as it is null.\"\n\n          10 |      */\n          11 |     static processAccessCode(session, requestData) {\n        > 12 |         const { quickShareSecret, clientAccessCodeHash, requiresAccessCode } = requestData;\n             |                 ^\n          13 |         \n          14 |         let passwordHash = null;\n          15 |         let accessCodeHash = null;\n\n      at EncryptionService.quickShareSecret [as processAccessCode] (services/EncryptionService.js:12:17)\n      at processAccessCode (tests/unit/services/EncryptionService.test.js:339:46)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at toThrow (tests/unit/services/EncryptionService.test.js:341:18)\n                at Array.forEach (<anonymous>)\n      at Object.forEach (tests/unit/services/EncryptionService.test.js:337:31)\n      at toThrow (tests/unit/services/EncryptionService.test.js:341:18)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/unit/services/EncryptionService.test.js:337:31)\n\n  ● EncryptionService › processAccessCode › Error Handling › should catch and log errors during analysis\n\n    expect(received).not.toThrow()\n\n    Error name:    \"Error\"\n    Error message: \"Logging error\"\n\n          354 |         const originalLog = mockConsole.log;\n          355 |         mockConsole.log.mockImplementation(() => {\n        > 356 |           throw new Error('Logging error');\n              |                 ^\n          357 |         });\n          358 |\n          359 |         const requestData = {\n\n      at Object.<anonymous> (tests/unit/services/EncryptionService.test.js:356:17)\n      at EncryptionService.log [as processAccessCode] (services/EncryptionService.js:36:25)\n      at processAccessCode (tests/unit/services/EncryptionService.test.js:367:44)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (tests/unit/services/EncryptionService.test.js:369:16)\n      at Object.toThrow (tests/unit/services/EncryptionService.test.js:369:16)\n\n  ● EncryptionService › processAccessCode › Error Handling › should handle circular references in session or requestData\n\n    expect(received).not.toThrow()\n\n    Error name:    \"Error\"\n    Error message: \"Logging error\"\n\n          354 |         const originalLog = mockConsole.log;\n          355 |         mockConsole.log.mockImplementation(() => {\n        > 356 |           throw new Error('Logging error');\n              |                 ^\n          357 |         });\n          358 |\n          359 |         const requestData = {\n\n      at Object.<anonymous> (tests/unit/services/EncryptionService.test.js:356:17)\n      at EncryptionService.log [as processAccessCode] (services/EncryptionService.js:52:25)\n      at processAccessCode (tests/unit/services/EncryptionService.test.js:395:44)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (tests/unit/services/EncryptionService.test.js:397:16)\n      at Object.toThrow (tests/unit/services/EncryptionService.test.js:397:16)\n\n  ● EncryptionService › processAccessCode › Performance Tests › should process access code within reasonable time\n\n    Logging error\n\n      354 |         const originalLog = mockConsole.log;\n      355 |         mockConsole.log.mockImplementation(() => {\n    > 356 |           throw new Error('Logging error');\n          |                 ^\n      357 |         });\n      358 |\n      359 |         const requestData = {\n\n      at Object.<anonymous> (tests/unit/services/EncryptionService.test.js:356:17)\n      at EncryptionService.log [as processAccessCode] (services/EncryptionService.js:42:25)\n      at Object.processAccessCode (tests/unit/services/EncryptionService.test.js:415:42)\n\n  ● EncryptionService › processAccessCode › Performance Tests › should handle concurrent access code processing\n\n    Logging error\n\n      354 |         const originalLog = mockConsole.log;\n      355 |         mockConsole.log.mockImplementation(() => {\n    > 356 |           throw new Error('Logging error');\n          |                 ^\n      357 |         });\n      358 |\n      359 |         const requestData = {\n\n      at Object.<anonymous> (tests/unit/services/EncryptionService.test.js:356:17)\n      at EncryptionService.log [as processAccessCode] (services/EncryptionService.js:36:25)\n      at processAccessCode (tests/unit/services/EncryptionService.test.js:437:45)\n          at Array.map (<anonymous>)\n      at Object.map (tests/unit/services/EncryptionService.test.js:436:35)\n\nFAIL tests/unit/services/FileAssemblyService.test.js\n  FileAssemblyService\n    assembleFile\n      ✕ should assemble file successfully (1 ms)\n      ✕ should handle assembly errors gracefully (1 ms)\n      ✕ should handle various upload ID formats\n      ✕ should handle various session objects\n      ✕ should handle null or undefined parameters\n    getFileSize\n      ✓ should get file size successfully (1 ms)\n      ✓ should handle file stat errors\n      ✓ should handle various file sizes (2 ms)\n      ✓ should handle different file types\n      ✓ should handle invalid file paths (1 ms)\n    Performance Tests\n      ✕ should assemble files within reasonable time\n      ✓ should get file size within reasonable time\n      ✕ should handle concurrent assembly operations\n      ✓ should handle concurrent file size operations\n    Error Recovery\n      ✕ should handle temporary assembly failures (1 ms)\n      ✓ should handle filesystem permission errors\n    Edge Cases\n      ✕ should handle extremely long file paths\n      ✕ should handle special characters in upload IDs\n      ✕ should handle circular references in session objects\n\n  ● FileAssemblyService › assembleFile › should assemble file successfully\n\n    assembleFile function not provided\n\n      17 |         \n      18 |         if (!assembleFileFn) {\n    > 19 |             throw new Error('assembleFile function not provided');\n         |                   ^\n      20 |         }\n      21 |         \n      22 |         const filePath = await assembleFileFn(uploadId, session);\n\n      at FileAssemblyService.assembleFile (services/FileAssemblyService.js:19:19)\n      at Object.assembleFile (tests/unit/services/FileAssemblyService.test.js:67:48)\n\n  ● FileAssemblyService › assembleFile › should handle assembly errors gracefully\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected substring: \"Failed to assemble file chunks\"\n    Received message:   \"assembleFile function not provided\"\n\n          17 |         \n          18 |         if (!assembleFileFn) {\n        > 19 |             throw new Error('assembleFile function not provided');\n             |                   ^\n          20 |         }\n          21 |         \n          22 |         const filePath = await assembleFileFn(uploadId, session);\n\n      at FileAssemblyService.assembleFile (services/FileAssemblyService.js:19:19)\n      at Object.assembleFile (tests/unit/services/FileAssemblyService.test.js:83:29)\n      at Object.toThrow (node_modules/expect/build/index.js:218:22)\n      at Object.toThrow (tests/unit/services/FileAssemblyService.test.js:84:17)\n\n  ● FileAssemblyService › assembleFile › should handle various upload ID formats\n\n    assembleFile function not provided\n\n      17 |         \n      18 |         if (!assembleFileFn) {\n    > 19 |             throw new Error('assembleFile function not provided');\n         |                   ^\n      20 |         }\n      21 |         \n      22 |         const filePath = await assembleFileFn(uploadId, session);\n\n      at FileAssemblyService.assembleFile (services/FileAssemblyService.js:19:19)\n      at Object.assembleFile (tests/unit/services/FileAssemblyService.test.js:106:50)\n\n  ● FileAssemblyService › assembleFile › should handle various session objects\n\n    assembleFile function not provided\n\n      17 |         \n      18 |         if (!assembleFileFn) {\n    > 19 |             throw new Error('assembleFile function not provided');\n         |                   ^\n      20 |         }\n      21 |         \n      22 |         const filePath = await assembleFileFn(uploadId, session);\n\n      at FileAssemblyService.assembleFile (services/FileAssemblyService.js:19:19)\n      at Object.assembleFile (tests/unit/services/FileAssemblyService.test.js:129:50)\n\n  ● FileAssemblyService › assembleFile › should handle null or undefined parameters\n\n    assembleFile function not provided\n\n      17 |         \n      18 |         if (!assembleFileFn) {\n    > 19 |             throw new Error('assembleFile function not provided');\n         |                   ^\n      20 |         }\n      21 |         \n      22 |         const filePath = await assembleFileFn(uploadId, session);\n\n      at FileAssemblyService.assembleFile (services/FileAssemblyService.js:19:19)\n      at Object.assembleFile (tests/unit/services/FileAssemblyService.test.js:150:50)\n\n  ● FileAssemblyService › Performance Tests › should assemble files within reasonable time\n\n    assembleFile function not provided\n\n      17 |         \n      18 |         if (!assembleFileFn) {\n    > 19 |             throw new Error('assembleFile function not provided');\n         |                   ^\n      20 |         }\n      21 |         \n      22 |         const filePath = await assembleFileFn(uploadId, session);\n\n      at FileAssemblyService.assembleFile (services/FileAssemblyService.js:19:19)\n      at Object.assembleFile (tests/unit/services/FileAssemblyService.test.js:261:48)\n\n  ● FileAssemblyService › Performance Tests › should handle concurrent assembly operations\n\n    assembleFile function not provided\n\n      17 |         \n      18 |         if (!assembleFileFn) {\n    > 19 |             throw new Error('assembleFile function not provided');\n         |                   ^\n      20 |         }\n      21 |         \n      22 |         const filePath = await assembleFileFn(uploadId, session);\n\n      at FileAssemblyService.assembleFile (services/FileAssemblyService.js:19:19)\n      at assembleFile (tests/unit/services/FileAssemblyService.test.js:296:29)\n          at Array.map (<anonymous>)\n      at Object.map (tests/unit/services/FileAssemblyService.test.js:295:45)\n\n  ● FileAssemblyService › Error Recovery › should handle temporary assembly failures\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected substring: \"Temporary failure\"\n    Received message:   \"assembleFile function not provided\"\n\n          17 |         \n          18 |         if (!assembleFileFn) {\n        > 19 |             throw new Error('assembleFile function not provided');\n             |                   ^\n          20 |         }\n          21 |         \n          22 |         const filePath = await assembleFileFn(uploadId, session);\n\n      at FileAssemblyService.assembleFile (services/FileAssemblyService.js:19:19)\n      at Object.assembleFile (tests/unit/services/FileAssemblyService.test.js:346:29)\n      at Object.toThrow (node_modules/expect/build/index.js:218:22)\n      at Object.toThrow (tests/unit/services/FileAssemblyService.test.js:347:17)\n\n  ● FileAssemblyService › Edge Cases › should handle extremely long file paths\n\n    assembleFile function not provided\n\n      17 |         \n      18 |         if (!assembleFileFn) {\n    > 19 |             throw new Error('assembleFile function not provided');\n         |                   ^\n      20 |         }\n      21 |         \n      22 |         const filePath = await assembleFileFn(uploadId, session);\n\n      at FileAssemblyService.assembleFile (services/FileAssemblyService.js:19:19)\n      at Object.assembleFile (tests/unit/services/FileAssemblyService.test.js:375:48)\n\n  ● FileAssemblyService › Edge Cases › should handle special characters in upload IDs\n\n    assembleFile function not provided\n\n      17 |         \n      18 |         if (!assembleFileFn) {\n    > 19 |             throw new Error('assembleFile function not provided');\n         |                   ^\n      20 |         }\n      21 |         \n      22 |         const filePath = await assembleFileFn(uploadId, session);\n\n      at FileAssemblyService.assembleFile (services/FileAssemblyService.js:19:19)\n      at Object.assembleFile (tests/unit/services/FileAssemblyService.test.js:396:50)\n\n  ● FileAssemblyService › Edge Cases › should handle circular references in session objects\n\n    assembleFile function not provided\n\n      17 |         \n      18 |         if (!assembleFileFn) {\n    > 19 |             throw new Error('assembleFile function not provided');\n         |                   ^\n      20 |         }\n      21 |         \n      22 |         const filePath = await assembleFileFn(uploadId, session);\n\n      at FileAssemblyService.assembleFile (services/FileAssemblyService.js:19:19)\n      at Object.assembleFile (tests/unit/services/FileAssemblyService.test.js:410:48)\n\nFAIL tests/unit/services/FileService.test.js\n  FileService\n    fileExists\n      ✓ should return true when file exists (1 ms)\n      ✓ should return false when file does not exist\n      ✓ should handle various file path formats\n      ✓ should handle empty or null paths gracefully\n    setDownloadHeaders\n      ✕ should set correct headers for a typical file (1 ms)\n      ✕ should use default mime type when not provided\n      ✕ should handle various mime types correctly (1 ms)\n      ✕ should handle special characters in filenames\n      ✕ should handle edge cases for file sizes\n    Error Handling\n      ✓ should handle filesystem errors gracefully\n      ✓ should not throw when response object is missing methods (1 ms)\n    Performance Tests\n      ✓ should check file exists within reasonable time\n      ✓ should handle multiple concurrent file existence checks (1 ms)\n    Integration with Real Filesystem\n      ✓ should work with actual file system operations (6 ms)\n\n  ● FileService › setDownloadHeaders › should set correct headers for a typical file\n\n    TypeError: res.setHeader is not a function\n\n      26 |      */\n      27 |     setDownloadHeaders(res, clip) {\n    > 28 |         res.setHeader('Content-Type', clip.mime_type || 'application/octet-stream');\n         |             ^\n      29 |         res.setHeader('Content-Length', clip.filesize);\n      30 |         res.setHeader('Content-Disposition', `attachment; filename=\"${clip.original_filename}\"`);\n      31 |         res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n\n      at FileService.setHeader [as setDownloadHeaders] (services/FileService.js:28:13)\n      at Object.setDownloadHeaders (tests/unit/services/FileService.test.js:105:19)\n\n  ● FileService › setDownloadHeaders › should use default mime type when not provided\n\n    TypeError: res.setHeader is not a function\n\n      26 |      */\n      27 |     setDownloadHeaders(res, clip) {\n    > 28 |         res.setHeader('Content-Type', clip.mime_type || 'application/octet-stream');\n         |             ^\n      29 |         res.setHeader('Content-Length', clip.filesize);\n      30 |         res.setHeader('Content-Disposition', `attachment; filename=\"${clip.original_filename}\"`);\n      31 |         res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n\n      at FileService.setHeader [as setDownloadHeaders] (services/FileService.js:28:13)\n      at Object.setDownloadHeaders (tests/unit/services/FileService.test.js:119:19)\n\n  ● FileService › setDownloadHeaders › should handle various mime types correctly\n\n    TypeError: res.setHeader is not a function\n\n      26 |      */\n      27 |     setDownloadHeaders(res, clip) {\n    > 28 |         res.setHeader('Content-Type', clip.mime_type || 'application/octet-stream');\n         |             ^\n      29 |         res.setHeader('Content-Length', clip.filesize);\n      30 |         res.setHeader('Content-Disposition', `attachment; filename=\"${clip.original_filename}\"`);\n      31 |         res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n\n      at FileService.setHeader [as setDownloadHeaders] (services/FileService.js:28:13)\n      at setDownloadHeaders (tests/unit/services/FileService.test.js:145:21)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/unit/services/FileService.test.js:137:17)\n\n  ● FileService › setDownloadHeaders › should handle special characters in filenames\n\n    TypeError: res.setHeader is not a function\n\n      26 |      */\n      27 |     setDownloadHeaders(res, clip) {\n    > 28 |         res.setHeader('Content-Type', clip.mime_type || 'application/octet-stream');\n         |             ^\n      29 |         res.setHeader('Content-Length', clip.filesize);\n      30 |         res.setHeader('Content-Disposition', `attachment; filename=\"${clip.original_filename}\"`);\n      31 |         res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n\n      at FileService.setHeader [as setDownloadHeaders] (services/FileService.js:28:13)\n      at setDownloadHeaders (tests/unit/services/FileService.test.js:169:21)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/unit/services/FileService.test.js:161:24)\n\n  ● FileService › setDownloadHeaders › should handle edge cases for file sizes\n\n    TypeError: res.setHeader is not a function\n\n      26 |      */\n      27 |     setDownloadHeaders(res, clip) {\n    > 28 |         res.setHeader('Content-Type', clip.mime_type || 'application/octet-stream');\n         |             ^\n      29 |         res.setHeader('Content-Length', clip.filesize);\n      30 |         res.setHeader('Content-Disposition', `attachment; filename=\"${clip.original_filename}\"`);\n      31 |         res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n\n      at FileService.setHeader [as setDownloadHeaders] (services/FileService.js:28:13)\n      at setDownloadHeaders (tests/unit/services/FileService.test.js:190:21)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/unit/services/FileService.test.js:182:17)\n\nFAIL tests/unit/services/QuickShareService.test.js\n  QuickShareService\n    applyQuickShareSettings\n      ✓ should apply Quick Share overrides to basic settings (4 ms)\n      ✓ should handle empty settings object (1 ms)\n      ✕ should handle null or undefined settings (13 ms)\n      ✓ should preserve non-Quick Share specific settings (1 ms)\n      ✓ should handle typical Quick Share scenarios\n      ✓ should handle edge cases and boundary values (1 ms)\n    Quick Share Configuration Logic\n      ✓ should apply appropriate settings for different content types\n      ✓ should handle security-related Quick Share settings (1 ms)\n      ✓ should handle accessibility and sharing options\n    Performance and Scalability\n      ✓ should handle large settings objects efficiently (1 ms)\n      ✓ should handle concurrent Quick Share setting applications\n    Error Handling and Edge Cases\n      ✓ should handle circular references gracefully\n      ✓ should handle deeply nested objects (1 ms)\n      ✓ should handle non-object input types\n    Backward Compatibility\n      ✓ should maintain compatibility with legacy settings format\n      ✓ should handle mixed legacy and modern settings\n\n  ● QuickShareService › applyQuickShareSettings › should handle null or undefined settings\n\n    expect(received).not.toThrow()\n\n    Error name:    \"TypeError\"\n    Error message: \"Cannot read properties of null (reading 'quickShare')\"\n\n          29 |      */\n          30 |     static applyQuickShareSettings(settings) {\n        > 31 |         if (!settings.quickShare) {\n             |                       ^\n          32 |             return settings;\n          33 |         }\n          34 |\n\n      at QuickShareService.quickShare [as applyQuickShareSettings] (services/QuickShareService.js:31:23)\n      at applyQuickShareSettings (tests/unit/services/QuickShareService.test.js:52:27)\n      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)\n      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)\n      at Object.toThrow (tests/unit/services/QuickShareService.test.js:53:14)\n      at Object.toThrow (tests/unit/services/QuickShareService.test.js:53:14)\n\nPASS tests/unit/services/StorageService.test.js\n  StorageService\n    Constructor\n      ✓ should initialize with provided dependencies (1 ms)\n      ✓ should handle missing dependencies gracefully\n    Database Operations\n      ✓ should handle database queries with proper error handling (1 ms)\n      ✓ should handle database connection errors\n      ✓ should handle transaction operations\n    File Storage Operations\n      ✓ should ensure storage directory exists\n      ✓ should check if files exist in storage (1 ms)\n      ✓ should get file statistics\n      ✓ should handle file removal operations\n      ✓ should handle filesystem errors gracefully (6 ms)\n    Upload ID Generation\n      ✓ should generate unique upload IDs (1 ms)\n      ✓ should handle ID generation errors (1 ms)\n    Storage Path Operations\n      ✓ should use configured storage path\n      ✓ should handle various storage path formats (1 ms)\n      ✓ should handle empty or null storage paths\n    Error Handling and Edge Cases\n      ✓ should handle pool connection errors\n      ✓ should handle malformed database responses\n      ✓ should handle concurrent operations\n    Performance Tests\n      ✓ should initialize within reasonable time (1 ms)\n      ✓ should handle large storage paths efficiently\n    Memory Management\n      ✓ should not leak memory during initialization\n    Configuration Validation\n      ✓ should validate constructor parameters (1 ms)\n      ✓ should handle invalid constructor parameters\n\nPASS tests/unit/services/template.test.js\n  Service Test Template\n    ✓ Template test - should be replaced with actual service tests (5 ms)\n    Error Handling Template\n      ✓ should handle database errors gracefully (1 ms)\n      ✓ should validate input parameters\n    Edge Cases Template\n      ✓ should handle empty inputs\n      ✓ should handle large inputs (1 ms)\n      ✓ should handle concurrent operations\n    Performance Template\n      ✓ should complete operations within time limits\n      ✓ should handle memory efficiently\n\nJest: \"global\" coverage threshold for statements (40%) not met: 38.5%\nJest: \"global\" coverage threshold for branches (40%) not met: 31.03%\nJest: \"global\" coverage threshold for functions (40%) not met: 29.62%\nTest Suites: 6 failed, 2 passed, 8 total\nTests:       38 failed, 92 passed, 130 total\nSnapshots:   0 total\nTime:        0.602 s, estimated 1 s\nRan all test suites.\n"
    }
  ]
}