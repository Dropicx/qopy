name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: |
          if npm run lint --if-present; then
            echo "‚úÖ Linting passed"
          else
            echo "‚ÑπÔ∏è No linting script found, skipping"
          fi

      - name: Run type checking
        run: |
          if npm run typecheck --if-present; then
            echo "‚úÖ Type checking passed"
          else
            echo "‚ÑπÔ∏è No type checking script found, skipping"
          fi

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

      - name: Generate test coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Store test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            coverage/
            junit.xml
          retention-days: 30

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install production dependencies
        run: npm ci --omit=dev

      - name: Build application
        run: npm run build

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    needs: [test, build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.qopy.app
      
    steps:
      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          # Add your staging deployment logic here
          # Example: kubectl, helm, or cloud provider CLI commands

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests on staging..."
          # Add basic smoke tests to verify deployment
          curl -f https://staging.qopy.app/health || exit 1

      - name: Notify deployment
        if: always()
        uses: actions/github-script@v8
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '‚úÖ' : '‚ùå';
            const message = `${status} Staging deployment ${context.sha.substring(0, 7)} completed`;
            
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              description: message,
              context: 'deployment/staging'
            });

  deploy-production:
    needs: [test, build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://qopy.app
      
    steps:
      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          # Add your production deployment logic here
          # Example: kubectl, helm, or cloud provider CLI commands

      - name: Run health checks
        run: |
          echo "üè• Running health checks on production..."
          # Add comprehensive health checks
          curl -f https://qopy.app/health || exit 1

      - name: Create release
        if: success()
        uses: actions/github-script@v8
        with:
          script: |
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${Date.now()}`,
              name: `Production Release ${context.sha.substring(0, 7)}`,
              body: `Automated production deployment of commit ${context.sha}`,
              draft: false,
              prerelease: false
            });
            
            console.log(`Created release: ${release.html_url}`);

      - name: Notify deployment
        if: always()
        uses: actions/github-script@v8
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '‚úÖ' : '‚ùå';
            const message = `${status} Production deployment ${context.sha.substring(0, 7)} completed`;
            
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              description: message,
              context: 'deployment/production'
            });

  dependabot-automerge:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'
    
    steps:
      - name: Enable auto-merge for Dependabot PRs
        run: |
          gh pr merge --auto --squash "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}