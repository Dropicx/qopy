name: Automated Dependency Updates

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  dependency-review:
    runs-on: ubuntu-latest
    outputs:
      updates-available: ${{ steps.check.outputs.updates-available }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Check for updates
        id: check
        run: |
          npm outdated --json > outdated.json || true
          
          if [ -s outdated.json ] && [ "$(cat outdated.json)" != "{}" ]; then
            echo "updates-available=true" >> $GITHUB_OUTPUT
            echo "📦 Updates available:"
            jq -r 'to_entries[] | "\(.key): \(.value.current) → \(.value.latest)"' outdated.json
          else
            echo "updates-available=false" >> $GITHUB_OUTPUT
            echo "✅ All dependencies are up to date"
          fi

      - name: Upload outdated report
        if: steps.check.outputs.updates-available == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: outdated-packages
          path: outdated.json
          retention-days: 7

  security-updates:
    needs: dependency-review
    runs-on: ubuntu-latest
    if: needs.dependency-review.outputs.updates-available == 'true'
    
    strategy:
      matrix:
        category:
          - security
          - patch
          - minor

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update dependencies - ${{ matrix.category }}
        run: |
          case "${{ matrix.category }}" in
            security)
              echo "🔒 Applying security updates..."
              npm audit fix --audit-level=high || true
              ;;
            patch)
              echo "🔧 Applying patch updates..."
              npx npm-check-updates --target patch --upgrade
              ;;
            minor)
              echo "📈 Applying minor updates..."
              npx npm-check-updates --target minor --upgrade
              ;;
          esac

      - name: Install updated dependencies
        run: |
          npm install
          npm audit --audit-level=moderate

      - name: Run tests
        run: |
          npm test || {
            echo "❌ Tests failed after updates"
            exit 1
          }

      - name: Create pull request
        if: success()
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: ${{ matrix.category }} dependency updates"
          title: "🔄 Automated ${{ matrix.category }} dependency updates"
          body: |
            ## ${{ matrix.category }} Dependency Updates
            
            This PR contains automated ${{ matrix.category }}-level dependency updates.
            
            ### Changes
            - Updated dependencies to latest ${{ matrix.category }} versions
            - All tests passing ✅
            - Security audit clean ✅
            
            ### Review Notes
            - This is an automated update
            - Please review changes before merging
            - Tests have been run automatically
            
            Generated by GitHub Actions workflow.
          branch: dependency-updates/${{ matrix.category }}
          delete-branch: true
          reviewers: |
            ${{ github.repository_owner }}
          labels: |
            dependencies
            automated
            ${{ matrix.category }}

  npm-audit-fix:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Run npm audit fix
        run: |
          echo "🔒 Running npm audit fix..."
          npm audit fix --audit-level=moderate || true
          
          # Check if any changes were made
          if git diff --quiet package*.json; then
            echo "No security fixes needed"
            exit 0
          fi

      - name: Test after security fixes
        run: |
          npm install
          npm test

      - name: Create security fix PR
        if: success()
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "fix: apply automated security fixes"
          title: "🔒 Automated security vulnerability fixes"
          body: |
            ## Security Vulnerability Fixes
            
            This PR applies automated fixes for security vulnerabilities found by `npm audit`.
            
            ### Changes
            - Applied `npm audit fix` for moderate+ vulnerabilities
            - All tests passing ✅
            - Dependencies updated to secure versions
            
            ### Security Impact
            - Addresses known security vulnerabilities
            - Updates to patched versions of affected packages
            - No breaking changes expected
            
            **Please review and merge promptly to address security issues.**
            
            Generated automatically by GitHub Actions.
          branch: security-fixes/automated
          delete-branch: true
          reviewers: |
            ${{ github.repository_owner }}
          labels: |
            security
            automated
            critical

  cleanup-old-branches:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete old dependency update branches
        run: |
          echo "🧹 Cleaning up old dependency update branches..."
          
          # Delete merged dependency branches older than 7 days
          git for-each-ref --format='%(refname:short) %(committerdate)' refs/remotes/origin/dependency-updates/ | \
          while read branch date; do
            if [[ $(date -d "$date" +%s) -lt $(date -d '7 days ago' +%s) ]]; then
              # Check if branch is merged
              if git merge-base --is-ancestor "origin/$branch" origin/main; then
                echo "Deleting merged branch: $branch"
                git push origin --delete "${branch#origin/}" || true
              fi
            fi
          done

      - name: Cleanup artifacts
        uses: actions/github-script@v7
        with:
          script: |
            // Delete old workflow artifacts (keep only last 10)
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const sorted = artifacts.data.artifacts.sort((a, b) => 
              new Date(b.created_at) - new Date(a.created_at)
            );
            
            // Keep only the 10 most recent artifacts
            const toDelete = sorted.slice(10);
            
            for (const artifact of toDelete) {
              if (artifact.name.includes('security') || artifact.name.includes('dependency')) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              }
            }